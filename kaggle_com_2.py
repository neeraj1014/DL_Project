# -*- coding: utf-8 -*-
"""Kaggle_com_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19ZVoi5sK9toIAh12FIlo9hSTTqjmGaCM
"""

import numpy as np
import torch.utils.data
from torch import nn, optim
from torchvision import datasets, transforms
from torchvision.models import resnet18, vgg19_bn
import torch
from torch.nn import functional as F
import torch.nn as nn
import os
import matplotlib.pyplot as plt


dataset = os.path.join("/iitjhome/b20bb025/scratch/data/b20bb025/dataset") 

transform = transforms.Compose([
    transforms.Resize((300, 300)),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

traindata = datasets.ImageFolder(dataset, transform=transform)
trainloader = torch.utils.data.DataLoader(traindata, batch_size= 64,shuffle=True)

model = vgg19_bn(pretrained = True)
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
model.classifier[3] = nn.Linear(4096, 1000)
new_layer = nn.Linear(1000, 264)
model.classifier[6] = new_layer
model.to(device)

loss_function = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr = 0.002)

def training(model):
  model.train()
  values = [0,0]
  t_loss = 0
  acc_train = 0
  total = 0
  for X,Y in trainloader:
    y = F.one_hot(Y, 264)
    pred_X = model(X.cuda())
    loss = loss_function(pred_X, y.float().cuda())
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    t_loss += loss.item()
    acc_train += torch.sum(torch.argmax(pred_X,1) == Y.cuda())
    total += len(X)
  t_loss = t_loss/len(trainloader)
  train_acc = float(float(acc_train*100)/total)
  values[0] = t_loss
  values[1] = train_acc
  return values

for epoch in range(150):
  l = training(model)
  print(f"Epoch {epoch+1} : Training loss  = {l[0]} | Training Accuracy  = {round(l[1], 2)}")



print("VGG_model")


model_scripted = torch.jit.script(model) # Export to TorchScript
model_scripted.save('model_scripted_VGG19.pt') 

